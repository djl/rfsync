#!/usr/bin/env python
"""
Usage: scully [<backup>]
"""
import os
import subprocess
import sys

try:
    import configparser
except ImportError:
    import ConfigParser as configparser


FILE = '~/.scully'


def error(msg, exitcode=1):
    """
    Print ``msg`` to stderr and exit with ``exitcode``.
    """
    msg = os.path.basename(sys.argv[0]) + ': ' + msg
    sys.stderr.write(msg + '\n')
    sys.exit(exitcode)


def expand(fn):
    """
    Fully expand a path, preserving trailing slashes
    """
    slash = fn[-1] == '/'
    fn = os.path.expandvars(fn)
    fn = os.path.expanduser(fn)
    fn = os.path.abspath(fn)
    if slash and fn[-1] != '/':
        fn += '/'
    return fn


class Backup(object):

    REQUIRED_OPTIONS = ['source', 'destination']

    def __init__(self, source, destination, **kwargs):
        self.source = source
        self.destination = destination

        for k, v in kwargs.items():
            setattr(self, k, v)

        self.validate_exclude()
        self.validate_source()

    def validate_exclude(self):
        if hasattr(self, 'exclude'):
            self.exclude = [x.strip() for x in self.exclude.split(',')]

    def validate_options(self):
        for option in self.REQUIRED_OPTIONS:
            if not getattr(self, option, None):
                error("Missing required option '%s'" % option)

    def validate_source(self):
        if not self.source:
            error("No source specified for backup '%s'" % self.backup)
        self.source = [expand(x.strip()) for x in self.source.split(',')]

    def run(self):
        cmds = ['rsync', '-a', '-v', '-z']
        if self.delete:
            cmds.append('--delete')

        cmds += self.source

        for exclude in self.exclude:
            cmds += ['--exclude', exclude]

        cmds.append(expand(self.destination))

        proc = subprocess.Popen(cmds)
        proc.communicate()


def main():
    config = configparser.ConfigParser()

    try:
        config.readfp(open(expand(FILE)))
    except IOError:
        error("Couldn't read your config file.")


    # list all backups
    if len(sys.argv) == 1:
        sys.stdout.write('\n'.join(sorted(config.sections())) + '\n')
        sys.exit(0)

    # does the backup exist?
    try:
        options = dict(config.items(sys.argv[1]))
    except configparser.NoSectionError:
        error("Invalid backup '%s'" % sys.argv[1])

    # backup is good. let's do it
    backup = Backup(**options)
    backup.run()


if __name__ == '__main__':
    main()
